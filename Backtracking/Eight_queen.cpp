/*
1.八皇后问题
该问题是国际西洋棋棋手马克斯·贝瑟尔于1848年提出：在8×8格的国际象棋上摆放八个皇后，使其不能互相攻击，即任意两个皇后都不能处于同一行、
同一列或同一斜线上，问有多少种摆法。

最容易想到的方法就是有序地从第 1 列的第 1 行开始，尝试放上一个皇后，然后再尝试第 2 列的第几行能够放上一个皇后，如果第 2 列也放置成功，
那么就继续放置第 3 列，如果此时第 3 列没有一行可以放置一个皇后，说明目前为止的尝试是无效的（即不可能得到最终解），那么此时就应该回溯到
上一步（即第 2 步），将上一步（第 2 步）所放置的皇后的位置再重新取走放在另一个符合要求的地方…如此尝试性地遍历加上回溯，就可以慢慢地逼近
最终解。
如果我们逐行放置皇后则肯定没有任意两个皇后位于同一行，只需要判断列和对角线即可。使用一个二维数组vis[3][]，其中vis[0][i]表示列，
vis[1][i]和vis[2][i]表示对角线。因为(x,y)的y-x值标识了主对角线，x+y值标识了副对角线。由于y-x可能为负，所以存取时要加上n。
*/

void search(int cur)  
{  
    int i,j;  
    if(cur==8) tot++;
    else  
    {  
        for(i=0;i<8;i++)  
        {  
            if(!vis[0][i]&&!vis[1][cur-i+8]&&!vis[2][cur+i])  
            {  
                vis[0][i]=1;  
                vis[1][cur-i+8]=1;  
                vis[2][cur+i]=1;    
                search(cur+1);  
                //改回辅助的全局变量 
                vis[0][i]=0;       
                vis[1][cur-i+8]=0;  
                vis[2][cur+i]=0;  
            }  
        }  
    }  
}

int vis[3][15],tot;
int main()  
{  
    search(0);   
    cout<<tot<<endl;
}
